@mixin themed() {
  @each $theme, $map in $ctheme {
    .theme--#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($ctheme, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin calc_width($obj, $occurance) {
  width: calc($occurance * #{$obj});
}

@function t($key) {
  @return map-get($theme-map, $key);
}

//desktop
@media screen and (min-width: 513px) {
  @each $theme, $map in $tThemes {
    @each $token, $lib in $map {
      .#{$theme} .#{$token} {
        @each $att, $val in $lib {
          #{$att}: #{$val};
        }
      }
    }
  }
}

//mobile
@media screen and (max-width: 512px) {
  @each $theme, $map in $tmThemes {
    @each $token, $lib in $map {
      .#{$theme} .#{$token} {
        @each $att, $val in $lib {
          #{$att}: #{$val};
        }
      }
    }
  }
}
